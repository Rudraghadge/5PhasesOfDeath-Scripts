Shader "Custom/GlitchSlice"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _Slices ("Number of Slices", Int) = 20
        _Offset ("Offset Amount", Float) = 0.05
        _Random ("Random Factor", Float) = 0.5
        _Vertical ("Vertical Mode (0 = Horizontal, 1 = Vertical)", Int) = 0
        _Sway ("Animate (0 = Off, 1 = On)", Int) = 0
    }

    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag
            #include "UnityCG.cginc"

            sampler2D _MainTex;
            float4 _MainTex_TexelSize;
            int _Slices;
            float _Offset;
            float _Random;
            int _Vertical;
            int _Sway;
            float4 _Time;

            // ---------------------
            // Random number helper
            // ---------------------
            float randomNoise(float2 p)
            {
                return frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
            }

            fixed4 frag(v2f_img i) : SV_Target
            {
                float sliceCoord;
                float offsetCoord;

                // Choose direction
                if (_Vertical == 0)
                {
                    sliceCoord = i.uv.y;
                    offsetCoord = i.uv.x;
                }
                else
                {
                    sliceCoord = i.uv.x;
                    offsetCoord = i.uv.y;
                }

                // Determine slice index
                float sliceIndex = floor(sliceCoord * _Slices) / _Slices;

                // Generate random value per slice
                float randVal = randomNoise(float2(offsetCoord, sliceIndex));

                // Animate if sway is enabled
                float t = (_Sway == 1) ? _Time.y : 1.0;

                // Apply sine-based offset
                offsetCoord += sin(t * randVal * 3.14159) * _Offset;
                offsetCoord = frac(offsetCoord);

                // Apply new UVs
                if (_Vertical == 0)
                    i.uv.x = offsetCoord;
                else
                    i.uv.y = offsetCoord;

                // Return final color
                return tex2D(_MainTex, i.uv);
            }
            ENDCG
        }
    }

    FallBack "Unlit/Texture"
}
